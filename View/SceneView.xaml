<TabItem x:Class="AngelNode.View.SceneView"
         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
         xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
         xmlns:dd="urn:gong-wpf-dragdrop"
         xmlns:util="clr-namespace:AngelNode.Util"
         xmlns:node="clr-namespace:AngelNode.Model.Node"
         xmlns:node1="clr-namespace:AngelNode.Util.Node"
         xmlns:system="clr-namespace:System;assembly=mscorlib"
         xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
         xmlns:validation="clr-namespace:AngelNode.Util.Validation"
         mc:Ignorable="d"
         DataContext="{Binding SceneViewModel, Source={StaticResource Locator}}"
         d:DesignHeight="450" d:DesignWidth="800">
    <TabItem.Header>
        <StackPanel Orientation="Horizontal">
            <Image Width="14" RenderOptions.BitmapScalingMode="Fant" Margin="0,0,3,0" Source="../Util/Icons/scene.png"/>
            <TextBlock Text="{Binding Scene.Name}"/>
        </StackPanel>
    </TabItem.Header>
    <TabItem.Resources>
        <util:BindingProxy x:Key="Proxy" Data="{Binding}" />
        <node1:DialogueNodeDropHandler x:Key="DialogueNodeDropHandler"/>
        <node1:ChangePoseNodeDropHandler x:Key="ChangePoseNodeDrophandler"/>
        <node1:BackgroundDropHandler x:Key="BackgroundDropHandler"/>
        <node1:VariableDropHandler x:Key="VariableDropHandler"/>
        <node1:SoundDropHandler x:Key="SoundDropHandler"/>
        <node1:NodeLibraryDragHandler x:Key="NodeLibraryDragHandler"/>
        <node1:SceneDropHandler x:Key="SceneDropHandler"/>
        <util:EnumToBoolConverter x:Key="EnumToBoolConverter"/>
        <util:EnumEqualityToVisibilityConverter x:Key="EnumEqualityToVisibilityConverter"/>

        <ObjectDataProvider x:Key="MovementTypes" MethodName="GetValues" ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="node:NodeMovement+MovementTypeEnum"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="MovementDirections" MethodName="GetValues" ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="node:NodeMovement+MovementDirectionEnum"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="SetTypes" MethodName="GetValues" ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="node:NodeSetVariable+SetType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="ComparisonTypes" MethodName="GetValues" ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="node:NodeVariableJump+ComparisonType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="EventTypes" MethodName="GetValues" ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="node:NodeEvent+EventTypeEnum"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </TabItem.Resources>
    <DockPanel Margin="5">
        <DockPanel.InputBindings>
            <KeyBinding Modifiers="Control" Key="P" Command="{Binding ParseCommand}"/>
        </DockPanel.InputBindings>
        <GroupBox DockPanel.Dock="Top" Header="Scene details">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Name:"/>
                <TextBox Grid.Column="1" Grid.Row="0" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0">
                    <TextBox.Text>
                        <Binding Path="Scene.Name" Mode="TwoWay">
                            <Binding.ValidationRules>
                                <validation:ObjectNameRule/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <Label Grid.Column="2" Grid.Row="0" VerticalContentAlignment="Center" Content="Tag:"/>
                <TextBox Grid.Column="3" Grid.Row="0" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0" Text="{Binding Scene.Tag}"/>
                <StackPanel Margin="5,0,5,0" Grid.Column="4" Grid.Row="0" Orientation="Horizontal">
                    <Label VerticalContentAlignment="Center" Content="Is startpoint:"/>
                    <CheckBox VerticalContentAlignment="Center" IsChecked="{Binding Scene.IsStartpoint}" />
                </StackPanel>

                <Label Grid.Column="0" Grid.Row="2" VerticalContentAlignment="Center" Content="Startpoint name:">
                    <Label.Style>
                        <Style TargetType="Label">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Source={StaticResource Proxy}, Path=Data.Scene.IsStartpoint}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Label.Style>
                </Label>
                <TextBox Grid.Column="1" Grid.Row="2" Grid.ColumnSpan="3" MinWidth="200" Margin="5,5,0,0" VerticalContentAlignment="Center" Text="{Binding Scene.StartpointName}" >
                    <TextBox.Style>
                        <Style TargetType="TextBox">
                            <Setter Property="Visibility" Value="Collapsed"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Source={StaticResource Proxy}, Path=Data.Scene.IsStartpoint}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
            </Grid>
        </GroupBox>
        <Grid DockPanel.Dock="Bottom">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"  MinWidth="220"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="3*"  MinWidth="220"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="2*" MinWidth="220"/>
            </Grid.ColumnDefinitions>
            <GroupBox Grid.Column="0" Header="Node library">
                <ListView x:Name="NodeLibrary" SelectionMode="Single" dd:DragDrop.IsDragSource="True" dd:DragDrop.DragHandler="{StaticResource NodeLibraryDragHandler}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDoubleClick">
                            <i:InvokeCommandAction Command="{Binding Path=AddLibraryNodeCommand}" CommandParameter="{Binding ElementName=NodeLibrary, Path=SelectedItem}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>

                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeDialogue"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/bubble.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Dialogue</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeResponseDialogue"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/bubble2.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Response dialogue</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeChangeBackground"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/image.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Background change</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeChangePose"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/face.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Pose change</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeMovement"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/run.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Movement</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeJump"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/up.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Jump</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeVariableJump"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/branch.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Conditional jump</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeSetVariable"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/gear.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Set variable</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodePlaySound"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/sound.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Play sound</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeFadeMusic"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/mute.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Fade music</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeShake"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/shake.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Shake</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeWait"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/wait.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Wait</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeEvent"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/event.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Event</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeTodo"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/todo.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Todo</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeCall"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/up.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Call</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeRet"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/return.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Return</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodePhone"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/phone.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Phone</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeLua"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/lua.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Lua</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeAchievement"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/achievement.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Achievement</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeRouteCompleted"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/person.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Route Completed</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                    <ListViewItem>
                        <ListViewItem.Resources>
                            <x:Type x:Key="NodeType" TypeName="node:NodeOutfitUnlocked"/>
                        </ListViewItem.Resources>
                        <StackPanel Orientation="Horizontal">
                            <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/outfit.png" Height="16"/>
                            <TextBlock Margin="5,0,0,0">Outfit Unlock</TextBlock>
                        </StackPanel>
                    </ListViewItem>
                </ListView>
            </GroupBox>
            <GridSplitter HorizontalAlignment="Center" Grid.Column="1" Width="3"/>
            <GroupBox Grid.Column="2" Header="Node editor">
                <ListView x:Name="NodeListView" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" SelectedItem="{Binding SelectedNode}" SelectionChanged="ListBox_SelectionChanged" ItemsSource="{Binding Scene.Nodes}">
                    <ListView.InputBindings>
                        <KeyBinding Key="Delete" Command="{Binding RemoveNodesCommand}" CommandParameter="{Binding ElementName=NodeListView, Path=SelectedItems}"/>
                    </ListView.InputBindings>
                    <ListView.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Add Dialogue" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeDialogue}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/bubble.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Response dialogue" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeResponseDialogue}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/bubble2.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Background change" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeChangeBackground}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/image.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Pose change" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeChangePose}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/face.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Movement" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeMovement}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/run.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Jump" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeJump}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/up.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Conditional Jump" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeVariableJump}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/branch.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Set Variable" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeSetVariable}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/gear.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Play Sound" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodePlaySound}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/sound.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Fade Music" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeFadeMusic}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/mute.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Shake" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeShake}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/shake.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Wait" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeWait}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/wait.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Event" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeEvent}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/event.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Todo" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeTodo}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/todo.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Call" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeCall}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/up.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Return" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeRet}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/return.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Phone" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodePhone}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/phone.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Lua Script" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeLua}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/lua.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Achievement" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeAchievement}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/achievement.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Route Completed" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeRouteCompleted}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/person.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Add Outfit Unlock" Command="{Binding Path=AddContextNodeCommand}" CommandParameter="{x:Type node:NodeOutfitUnlocked}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/outfit.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <Separator/>
                            <MenuItem Header="Parse text" Command="{Binding Path=ParseCommand}" InputGestureText="Ctrl+P">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/file.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Run from here" Command="{Binding Path=RunCommand}">
                                <MenuItem.Icon>
                                    <Image RenderOptions.BitmapScalingMode="Fant" Source="../Util/Icons/play.png"/>
                                </MenuItem.Icon>
                            </MenuItem>
                        </ContextMenu>
                    </ListView.ContextMenu>
                    <ListView.Resources>
                        <ResourceDictionary Source="NodeNameDictionary.xaml"/>
                    </ListView.Resources>
                </ListView>
            </GroupBox>
            <GridSplitter HorizontalAlignment="Center" Grid.Column="3" Width="3"/>
            <GroupBox Grid.Column="4" Header="Node details">
                <ContentControl Content="{Binding SelectedNode}">
                    <ContentControl.Resources>
                        <DataTemplate DataType="{x:Type node:NodeDialogue}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Dialogue text:"/>
                                <TextBox AcceptsReturn="True" TextWrapping="Wrap" Grid.Column="1" Grid.Row="0" VerticalContentAlignment="Center" MinWidth="200" Text="{Binding Text}" Margin="5,5,0,0"/>

                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Character:"/>
                                <ComboBox Grid.Column="1" Grid.Row="1" dd:DragDrop.DropHandler="{StaticResource DialogueNodeDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Characters}" DisplayMemberPath="Name" SelectedItem="{Binding Character}" Margin="5,5,0,0"/>

                                <Button Margin="0, 10, 0, 0" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" Content="Convert to Response dialogue" Command="{Binding Source={StaticResource Proxy}, Path=Data.ConvertResponseCommand}"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeMovement}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Movement type:"/>
                                <ComboBox Grid.Column="1" Grid.Row="0" MinWidth="200" ItemsSource="{Binding Source={StaticResource MovementTypes}}" SelectedItem="{Binding MovementType}" Margin="5,5,0,0"/>

                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Movement direction:"/>
                                <ComboBox Grid.Column="1" Grid.Row="1" MinWidth="200" ItemsSource="{Binding Source={StaticResource MovementDirections}}" SelectedItem="{Binding MovementDirection}" Margin="5,5,0,0"/>

                                <Label Grid.Column="0" Grid.Row="2" VerticalContentAlignment="Center" Content="Character:"/>
                                <ComboBox Grid.Column="1" Grid.Row="2" dd:DragDrop.DropHandler="{StaticResource DialogueNodeDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Characters}" DisplayMemberPath="Name" SelectedItem="{Binding Character}" Margin="5,5,0,0"/>

                                <GroupBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="3" Header="Movement animation">
                                    <StackPanel Margin="6,3,3,3">
                                        <RadioButton Content="Fade" GroupName="AnimationType" Margin="0,2,0,2" IsChecked="{Binding MovementAnimation, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Fade'}"/>
                                        <RadioButton Content="Slide" GroupName="AnimationType" Margin="0,2,0,2" IsChecked="{Binding MovementAnimation, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Slide'}"/>
                                    </StackPanel>
                                </GroupBox>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeChangePose}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Character:"/>
                                <ComboBox Grid.Column="1" Grid.Row="0" dd:DragDrop.DropHandler="{StaticResource DialogueNodeDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Characters}" DisplayMemberPath="Name" SelectedItem="{Binding Character}" Margin="5,5,0,0"/>

                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Pose:"/>
                                <ComboBox Grid.Column="1" Grid.Row="1" dd:DragDrop.DropHandler="{StaticResource ChangePoseNodeDrophandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Character.Poses}" DisplayMemberPath="Name" SelectedItem="{Binding Pose}" Margin="5,5,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeOutfitUnlocked}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Character:"/>
                                <ComboBox Grid.Column="1" Grid.Row="0" dd:DragDrop.DropHandler="{StaticResource DialogueNodeDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Characters}" DisplayMemberPath="Name" SelectedItem="{Binding Character}" Margin="5,5,0,0"/>

                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Outift:"/>
                                <ComboBox Grid.Column="1" Grid.Row="1" MinWidth="200" ItemsSource="{Binding Character.Outfits}" DisplayMemberPath="Name" SelectedItem="{Binding Outfit}" Margin="5,5,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeChangeBackground}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Background:"/>
                                <ListBox Grid.Column="1" Grid.Row="0" dd:DragDrop.DropHandler="{StaticResource BackgroundDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" DisplayMemberPath="Name" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.BackgroundSource}" SelectedItem="{Binding Background}" Margin="5,5,0,0">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDoubleClick">
                                            <i:InvokeCommandAction Command="{Binding Source={StaticResource Proxy}, Path=Data.ResourcePickerCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ListBox>

                                <GroupBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Header="Transition type">
                                    <StackPanel Margin="6,3,3,3">
                                        <RadioButton Content="New day" GroupName="TransitionType" Margin="0,2,0,2" IsChecked="{Binding TransitionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='NewDay'}"/>
                                        <RadioButton Content="Blend" GroupName="TransitionType" Margin="0,2,0,2" IsChecked="{Binding TransitionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Blend'}"/>
                                        <RadioButton Content="Instant" GroupName="TransitionType" Margin="0,2,0,2" IsChecked="{Binding TransitionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Instant'}"/>
                                        <RadioButton Content="Fade to black" GroupName="TransitionType" Margin="0,2,0,2" IsChecked="{Binding TransitionType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='FadeToBlack'}"/>
                                    </StackPanel>
                                </GroupBox>

                                <GroupBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" Header="Transition speed">
                                    <StackPanel Margin="6,3,3,3">
                                        <RadioButton Content="Slow" GroupName="TransitionSpeed" Margin="0,2,0,2" IsChecked="{Binding TransitionSpeed, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Slow'}"/>
                                        <RadioButton Content="Medium" GroupName="TransitionSpeed" Margin="0,2,0,2" IsChecked="{Binding TransitionSpeed, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Medium'}"/>
                                        <RadioButton Content="Fast" GroupName="TransitionSpeed" Margin="0,2,0,2" IsChecked="{Binding TransitionSpeed, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Fast'}"/>
                                    </StackPanel>
                                </GroupBox>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeResponseDialogue}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Dialogue text:"/>
                                <TextBox AcceptsReturn="True" TextWrapping="Wrap" Grid.Column="1" Grid.Row="0" VerticalContentAlignment="Center" MinWidth="200" Text="{Binding Dialogue}" Margin="5,5,0,0"/>

                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Character:"/>
                                <ComboBox Grid.Column="1" Grid.Row="1" dd:DragDrop.DropHandler="{StaticResource DialogueNodeDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Characters}" DisplayMemberPath="Name" SelectedItem="{Binding Character}" Margin="5,5,0,0"/>

                                <GroupBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" VerticalContentAlignment="Center" Header="Options">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <DataGrid Grid.Row="0" x:Name="ResponseGrid" MinWidth="200" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" CanUserAddRows="False" HeadersVisibility="Column" CanUserReorderColumns="False" CanUserResizeColumns="False" CanUserResizeRows="False" CanUserSortColumns="False" ItemsSource="{Binding ResponseMap}" AutoGenerateColumns="False" Margin="0,5,0,0">
                                            <DataGrid.Resources>
                                                <Style TargetType="{x:Type DataGridCell}" >
                                                    <Style.Triggers>
                                                        <Trigger Property="IsSelected" Value="True">
                                                            <Setter Property="Foreground" Value="Black"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </DataGrid.Resources>
                                            <DataGrid.Columns>
                                                <DataGridTextColumn Header="Text" Binding="{Binding Text}" Width="*">
                                                    <DataGridTextColumn.ElementStyle>
                                                        <Style TargetType="TextBlock">
                                                            <Setter Property="VerticalAlignment" Value="Center" />
                                                            <Setter Property="Margin" Value="5,0,0,0" />
                                                        </Style>
                                                    </DataGridTextColumn.ElementStyle>
                                                </DataGridTextColumn>
                                                <DataGridTemplateColumn Header="Target" Width="*">
                                                    <DataGridTemplateColumn.CellTemplate>
                                                        <DataTemplate>
                                                            <ContentControl Content="{Binding Target}" Margin="1">
                                                                <i:Interaction.Triggers>
                                                                    <i:EventTrigger EventName="MouseDoubleClick">
                                                                        <i:InvokeCommandAction Command="{Binding Source={StaticResource Proxy}, Path=Data.SelectNodeCommand}" CommandParameter="{Binding ElementName=ResponseGrid, Path=SelectedValue}" />
                                                                    </i:EventTrigger>
                                                                </i:Interaction.Triggers>
                                                                <ContentControl.ContentTemplateSelector>
                                                                    <node1:NodeTemplateSelector>
                                                                        <node1:NodeTemplateSelector.DialogueTemplates>
                                                                            <ResourceDictionary Source="NodeNameDictionary.xaml"/>
                                                                        </node1:NodeTemplateSelector.DialogueTemplates>
                                                                        <node1:NodeTemplateSelector.EmptyTemplate>
                                                                            <DataTemplate>
                                                                                <TextBlock Text="No target"/>
                                                                            </DataTemplate>
                                                                        </node1:NodeTemplateSelector.EmptyTemplate>
                                                                    </node1:NodeTemplateSelector>
                                                                </ContentControl.ContentTemplateSelector>
                                                            </ContentControl>
                                                        </DataTemplate>
                                                    </DataGridTemplateColumn.CellTemplate>
                                                </DataGridTemplateColumn>
                                            </DataGrid.Columns>
                                        </DataGrid>
                                        <Button Content="Add option" Grid.Row="1" Margin="0,5,0,0" Command="{Binding Source={StaticResource Proxy}, Path=Data.AddOptionCommand}"/>
                                    </Grid>
                                </GroupBox>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeCall}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Target:"/>
                                <ComboBox Grid.Column="1" Grid.Row="0" dd:DragDrop.DropHandler="{StaticResource SceneDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Scenes}" DisplayMemberPath="Name" SelectedItem="{Binding Target}" Margin="5,5,0,0"/>
                                <Button Margin="5,5,0,0" Grid.Column="1" Grid.Row="1" Content="Jump to scene" Command="{Binding Source={StaticResource Proxy}, Path=Data.JumpSceneCommand}" CommandParameter="{Binding Target}" />
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeJump}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Target:"/>
                                <ListBox Grid.Column="1" Grid.Row="0" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.TargetSource}" SelectedItem="{Binding Target}" Margin="5,5,0,0">
                                    <ListBox.ItemTemplateSelector>
                                        <node1:NodeTemplateSelector>
                                            <node1:NodeTemplateSelector.DialogueTemplates>
                                                <ResourceDictionary Source="NodeNameDictionary.xaml"/>
                                            </node1:NodeTemplateSelector.DialogueTemplates>
                                            <node1:NodeTemplateSelector.EmptyTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="No target"/>
                                                </DataTemplate>
                                            </node1:NodeTemplateSelector.EmptyTemplate>
                                        </node1:NodeTemplateSelector>
                                    </ListBox.ItemTemplateSelector>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDoubleClick">
                                            <i:InvokeCommandAction Command="{Binding Source={StaticResource Proxy}, Path=Data.SelectNodeCommand}" CommandParameter="{Binding ElementName=NodeListView, Path=SelectedValue}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ListBox>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeVariableJump}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Target:"/>
                                <ListBox Grid.Column="1" Grid.Row="0" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.CTargetSource}" SelectedItem="{Binding Target}" Margin="5,5,0,0">
                                    <ListBox.ItemTemplateSelector>
                                        <node1:NodeTemplateSelector>
                                            <node1:NodeTemplateSelector.DialogueTemplates>
                                                <ResourceDictionary Source="NodeNameDictionary.xaml"/>
                                            </node1:NodeTemplateSelector.DialogueTemplates>
                                            <node1:NodeTemplateSelector.EmptyTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="No target"/>
                                                </DataTemplate>
                                            </node1:NodeTemplateSelector.EmptyTemplate>
                                        </node1:NodeTemplateSelector>
                                    </ListBox.ItemTemplateSelector>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDoubleClick">
                                            <i:InvokeCommandAction Command="{Binding Source={StaticResource Proxy}, Path=Data.SelectNodeCommand}" CommandParameter="{Binding ElementName=NodeListView, Path=SelectedValue}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ListBox>
                                <Label Grid.Column="0" Grid.Row="2" VerticalContentAlignment="Center" Content="Value:"/>
                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Variable:"/>
                                <Label Grid.Column="0" Grid.Row="3" VerticalContentAlignment="Center" Content="Comparison type:"/>
                                <ComboBox Grid.Column="1" Grid.Row="1" MinWidth="200" dd:DragDrop.DropHandler="{StaticResource VariableDropHandler}" dd:DragDrop.IsDropTarget="True" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Variables}" SelectedItem="{Binding Variable}" DisplayMemberPath="Name" Margin="5,5,0,0"/>
                                <TextBox Grid.Column="1" Grid.Row="2" VerticalAlignment="Center" Text="{Binding Value}" Margin="4,2,0,0"/>
                                <ComboBox Grid.Column="1" Grid.Row="3" VerticalAlignment="Center" ItemsSource="{Binding Source={StaticResource ComparisonTypes}}" SelectedItem="{Binding Type}" Margin="4,2,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeSetVariable}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Variable:"/>
                                <ComboBox Grid.Column="1" Grid.Row="0" MinWidth="200" dd:DragDrop.DropHandler="{StaticResource VariableDropHandler}" dd:DragDrop.IsDropTarget="True" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Variables}" SelectedItem="{Binding Variable}" DisplayMemberPath="Name" Margin="5,5,0,0"/>

                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Value:"/>
                                <TextBox Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" Text="{Binding Value}" Margin="4,2,0,0"/>

                                <Label Grid.Column="0" Grid.Row="2" VerticalContentAlignment="Center" Content="Operation type:"/>
                                <ComboBox Grid.Column="1" Grid.Row="2" VerticalAlignment="Center" ItemsSource="{Binding Source={StaticResource SetTypes}}" SelectedItem="{Binding Type}" Margin="4,2,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodePlaySound}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Sound:"/>
                                <ListBox Grid.Column="1" Grid.Row="0" dd:DragDrop.DropHandler="{StaticResource SoundDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" DisplayMemberPath="Name" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.SoundSource}" SelectedItem="{Binding Sound}" Margin="5,5,0,0">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDoubleClick">
                                            <i:InvokeCommandAction Command="{Binding Source={StaticResource Proxy}, Path=Data.ResourcePickerCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ListBox>
                                
                                <GroupBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Header="Sound type">
                                    <StackPanel Margin="6,3,3,3">
                                        <RadioButton Content="Music" GroupName="SoundType" Margin="0,2,0,2" IsChecked="{Binding SoundType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Music'}"/>
                                        <RadioButton Content="SFX" GroupName="SoundType" Margin="0,2,0,2" IsChecked="{Binding SoundType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='SFX'}"/>
                                    </StackPanel>
                                </GroupBox>

                                <Label Grid.Column="0" Grid.Row="2" VerticalContentAlignment="Center" Content="Start time (s):"/>
                                <TextBox Grid.Column="1" Grid.Row="2" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0">
                                    <TextBox.Text>
                                        <Binding Path="StartTime">
                                            <Binding.ValidationRules>
                                                <validation:PositiveFloatRule/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>

                                <Label Grid.Column="0" Grid.Row="3" VerticalContentAlignment="Center" Content="Volume (0.0 - 1.0):"/>
                                <TextBox Grid.Column="1" Grid.Row="3" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0">
                                    <TextBox.Text>
                                        <Binding Path="Volume">
                                            <Binding.ValidationRules>
                                                <validation:PositiveFloatRule/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeShake}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Amplitude:"/>
                                <TextBox Grid.Column="1" Grid.Row="0" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0">
                                    <TextBox.Text>
                                        <Binding Path="Amplitude">
                                            <Binding.ValidationRules>
                                                <validation:PositiveFloatRule/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>

                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Duration:"/>
                                <TextBox Grid.Column="1" Grid.Row="1" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0">
                                    <TextBox.Text>
                                        <Binding Path="Duration">
                                            <Binding.ValidationRules>
                                                <validation:PositiveFloatRule/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>

                                <Label Grid.Column="0" Grid.Row="2" VerticalContentAlignment="Center" Content="Shake background:"/>
                                <CheckBox Grid.Column="1" Grid.Row="2" VerticalAlignment="Center" IsChecked="{Binding ShakeBackground}" Margin="4,2,0,0"/>

                                <Label Grid.Column="0" Grid.Row="3" VerticalContentAlignment="Center" Content="Shake characters:"/>
                                <CheckBox Grid.Column="1" Grid.Row="3" VerticalAlignment="Center" IsChecked="{Binding ShakeCharacters}" Margin="4,2,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeWait}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Duration (s):"/>
                                <TextBox Grid.Column="1" Grid.Row="0" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0">
                                    <TextBox.Text>
                                        <Binding Path="Duration">
                                            <Binding.ValidationRules>
                                                <validation:PositiveFloatRule/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeFadeMusic}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Fade time (s):"/>
                                <TextBox Grid.Column="1" Grid.Row="0" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0">
                                    <TextBox.Text>
                                        <Binding Path="FadeTime" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validation:PositiveFloatRule AllowZero="False"/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <GroupBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Header="Fade type">
                                    <StackPanel Margin="6,3,3,3">
                                        <RadioButton Content="Music" GroupName="FadeType" Margin="0,2,0,2" IsChecked="{Binding AudioFadeType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='Music'}"/>
                                        <RadioButton Content="SFX" GroupName="FadeType" Margin="0,2,0,2" IsChecked="{Binding AudioFadeType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='SFX'}"/>
                                        <RadioButton Content="All" GroupName="FadeType" Margin="0,2,0,2" IsChecked="{Binding AudioFadeType, Converter={StaticResource EnumToBoolConverter}, ConverterParameter='All'}"/>
                                    </StackPanel>
                                </GroupBox>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeEvent}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                
                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Event type:"/>
                                <ComboBox Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" ItemsSource="{Binding Source={StaticResource EventTypes}}" SelectedItem="{Binding EventType}" Margin="4,2,0,0">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock>
                                                <TextBlock.Text>
                                                    <Binding Path="">
                                                        <Binding.Converter>
                                                            <util:EventTypeEnumToStringConverter/>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </TextBlock.Text>
                                            </TextBlock>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>

                                <GroupBox Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" Header="Event details">
                                    <StackPanel>
                                        <Grid Visibility="{Binding EventType, Converter={StaticResource EnumEqualityToVisibilityConverter}, ConverterParameter='HookBrackets'}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>

                                            <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Displayed text:"/>
                                            <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Text}" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0"/>

                                            <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Duration:"/>
                                            <TextBox Grid.Column="1" Grid.Row="1" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0">
                                                <TextBox.Text>
                                                    <Binding Path="Duration">
                                                        <Binding.ValidationRules>
                                                            <validation:PositiveFloatRule/>
                                                        </Binding.ValidationRules>
                                                    </Binding>
                                                </TextBox.Text>
                                            </TextBox>

                                            <Label Grid.Column="0" Grid.Row="2" VerticalContentAlignment="Center" Content="Black on white:"/>
                                            <CheckBox Grid.Column="1" Grid.Row="2" IsChecked="{Binding BlackOnWhite}" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0"/>
                                        </Grid>
                                        <Grid Visibility="{Binding EventType, Converter={StaticResource EnumEqualityToVisibilityConverter}, ConverterParameter='Call'}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>

                                            <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Character:"/>
                                            <ComboBox Grid.Column="1" Grid.Row="0" dd:DragDrop.DropHandler="{StaticResource DialogueNodeDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Characters}" DisplayMemberPath="Name" SelectedItem="{Binding Caller}" Margin="5,5,0,0"/>

                                            <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Time:"/>
                                            <TextBox Grid.Column="1" Grid.Row="1" MinWidth="200" Text="{Binding PhoneTime}" Margin="5,5,0,0"/>
                                            
                                            <Label Grid.Column="0" Grid.Row="2" VerticalContentAlignment="Center" Content="Is player initiated:"/>
                                            <CheckBox Grid.Column="1" Grid.Row="2" MinWidth="200" IsChecked="{Binding IsPlayerInitiated}" Margin="5,5,0,0"/>

                                            <Label Grid.Column="0" Grid.Row="3" VerticalContentAlignment="Center" Content="Is ongoing:"/>
                                            <CheckBox Grid.Column="1" Grid.Row="3" MinWidth="200" IsChecked="{Binding IsOngoing}" Margin="5,5,0,0"/>
                                        </Grid>
                                        <Grid Visibility="{Binding EventType, Converter={StaticResource EnumEqualityToVisibilityConverter}, ConverterParameter='Custom'}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>

                                            <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Event name:"/>
                                            <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding EventName}" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0"/>
                                        </Grid>
                                    </StackPanel>
                                </GroupBox>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeTodo}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Note:"/>
                                <TextBox AcceptsReturn="True" TextWrapping="Wrap" Grid.Column="1" Grid.Row="0" Text="{Binding Note}" VerticalContentAlignment="Center" MinWidth="200" Margin="5,5,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeLua}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition MinHeight="300" Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Script:"/>
                                <TextBox AcceptsReturn="True" FontFamily="Fira Code" FontSize="10" TextWrapping="Wrap" Grid.Column="0" Grid.Row="1" Text="{Binding Script}" MinWidth="200" Margin="5,0,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeAchievement}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Achievement name:"/>
                                <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Name}" MinWidth="200" Margin="5,5,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeRouteCompleted}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Route name:"/>
                                <TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Name}" MinWidth="200" Margin="5,5,0,0"/>
                            </Grid>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodeRet}">
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type node:NodePhone}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Label Grid.Column="0" Grid.Row="0" VerticalContentAlignment="Center" Content="Character:"/>
                                <!-- The DialogueNode helper actually works here too -->
                                <ComboBox Grid.Column="1" Grid.Row="0" dd:DragDrop.DropHandler="{StaticResource DialogueNodeDropHandler}" dd:DragDrop.IsDropTarget="True" MinWidth="200" ItemsSource="{Binding Source={StaticResource Proxy}, Path=Data.Characters}" DisplayMemberPath="Name" SelectedItem="{Binding Character}" Margin="5,5,0,0"/>

                                <Label Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Center" Content="Time:"/>
                                <TextBox AcceptsReturn="True" TextWrapping="Wrap" Grid.Column="1" Grid.Row="1" VerticalContentAlignment="Center" MinWidth="200" Text="{Binding Time}" Margin="5,5,0,0"/>

                                <GroupBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" VerticalContentAlignment="Center" Header="Messages">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <DataGrid Grid.Row="0" x:Name="ResponseGrid" MinWidth="200" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" CanUserAddRows="False" HeadersVisibility="Column" CanUserReorderColumns="False" CanUserResizeColumns="False" CanUserResizeRows="False" CanUserSortColumns="False" ItemsSource="{Binding PhoneMessages}" AutoGenerateColumns="False" Margin="0,5,0,0">
                                            <DataGrid.Resources>
                                                <Style TargetType="{x:Type DataGridCell}" >
                                                    <Style.Triggers>
                                                        <Trigger Property="IsSelected" Value="True">
                                                            <Setter Property="Foreground" Value="Black"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </DataGrid.Resources>
                                            <DataGrid.Columns>
                                                <DataGridTextColumn Header="Text" Binding="{Binding Text}" Width="2*">
                                                    <DataGridTextColumn.ElementStyle>
                                                        <Style TargetType="TextBlock">
                                                            <Setter Property="VerticalAlignment" Value="Center" />
                                                            <Setter Property="TextWrapping" Value="Wrap" />
                                                            <Setter Property="Margin" Value="5,0,0,0" />
                                                        </Style>
                                                    </DataGridTextColumn.ElementStyle>
                                                    <DataGridTextColumn.EditingElementStyle>
                                                        <Style TargetType="TextBox">
                                                            <Setter Property="TextWrapping" Value="Wrap" />
                                                            <Setter Property="AcceptsReturn" Value="true" />
                                                        </Style>
                                                    </DataGridTextColumn.EditingElementStyle>
                                                </DataGridTextColumn>
                                                <DataGridCheckBoxColumn Header="Player Made" Binding="{Binding PlayerMade, UpdateSourceTrigger=PropertyChanged}" Width="*">
                                                    <DataGridCheckBoxColumn.ElementStyle>
                                                        <Style TargetType="CheckBox">
                                                            <Setter Property="VerticalAlignment" Value="Center" />
                                                            <Setter Property="HorizontalAlignment" Value="Center" />
                                                        </Style>
                                                    </DataGridCheckBoxColumn.ElementStyle>
                                                </DataGridCheckBoxColumn>
                                                <DataGridCheckBoxColumn Header="Skip" Binding="{Binding Skip, UpdateSourceTrigger=PropertyChanged}" Width="*">
                                                    <DataGridCheckBoxColumn.ElementStyle>
                                                        <Style TargetType="CheckBox">
                                                            <Setter Property="VerticalAlignment" Value="Center" />
                                                            <Setter Property="HorizontalAlignment" Value="Center" />
                                                        </Style>
                                                    </DataGridCheckBoxColumn.ElementStyle>
                                                </DataGridCheckBoxColumn>
                                            </DataGrid.Columns>
                                        </DataGrid>
                                        <Button Content="Add message" Grid.Row="1" Margin="0,5,0,0" Command="{Binding Source={StaticResource Proxy}, Path=Data.AddMessageCommand}"/>
                                        <Button Content="Duplicate" Grid.Row="2" Margin="0,5,0,0" Command="{Binding Source={StaticResource Proxy}, Path=Data.DuplicatePhoneCommand}"/>
                                    </Grid>
                                </GroupBox>
                            </Grid>
                        </DataTemplate>
                    </ContentControl.Resources>
                </ContentControl>
            </GroupBox>
        </Grid>
    </DockPanel>
</TabItem>
